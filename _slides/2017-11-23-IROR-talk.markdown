---
layout: slide-deck
title:  "IROR Seminar"
author: Will Rowe
permalink: /IROR-nov2017/
group: presentation
theme: ember
transition: slide

---

<script type="text/template">

#### IROR Seminar Series

***

# AMR, meta sets, Go!

***

Will Rowe PhD

<br/>email: [will.rowe@stfc.ac.uk](will.rowe@stfc.ac.uk) | twitter: [wil_rowe](https://twitter.com/wil_rowe)

----

***

## Today's talk

***

* Antimicrobial Resistance (AMR)
 - the problem
 - what are antimicrobial resistance genes?
 - how do we detect them?

* Tool development
 - resistance genotyping from metagenomes
 - reporting and visualisation

* Go
 - a language overview
 - why is it useful for bioinformatics?

----

<img src="https://upload.wikimedia.org/wikipedia/commons/6/69/AntimcrresUKreview2.jpg" alt="oneill review" style="width: 70%;"/>

> THE REVIEW ON ANTIMICROBIAL RESISTANCE 2016, CHAIRED BY JIM Oâ€™NEILL

---

***

### Antimicrobial Resistance: [resistance genes]()

***

* AMR traits are genetically encoded
 - can be either [intrinsic]() or [acquired]()

* Acquired AMR is a result of genomic change
 - mutation in a gene (Single Nucleotide Polymorphism, Insertion, Deletion)
 - horizontal gene transfer

* Antimicrobial Resistance Gene ([ARG]())
 - a gene conferring resistance to >= 1 antimicrobial

---

***

### Antimicrobial Resistance: [genetics recap]()

***

* A gene is a unit of DNA

* A gene is transcribed to RNA, which in turn can be used to create a protein

* Genes are the basic physical unit of heredity

* They are a linear string of nucleotides
 - the nucleotide sequence dictates the function of a gene
 - the nucleotides are A, C, T, G
 - a gene can be represented as a 2-bit sequence of A/C/T/G

---

***

### Antimicrobial Resistance: [resistance genes]()

***

* Detection is important
 - patient outcome
 - drug development and longevity
 - policy

* Explanation of an observed phenotype
 - informed treatment choices

* Surveillance of ARGs
 - pathogen evolution / outbreak monitoring
 - environmental impact

---

![jac-study-fig-2]({{site.url}}/slides/slide-data/host-microbe-talk-jan2017/jac-2.png)

 * Over-expression of beta lactam ARGs (*blaOXA* and *blaGES*) in hospital effluents

> ROWE, W. et al. 2017. Overexpression of antibiotic resistance genes in hospital effluents over time. J Antimicrob Chemother dkx017. doi: [10.1093/jac/dkx017](https://doi.org/10.1093/jac/dkx017)

---

***

### Antimicrobial Resistance: [metagenomics]()

***

* [Metagenomics]() is the study of bacterial communities using genomic sequencing
 - DNA is extracted directly from an environment, bypassing culture
 - offers improved sampling of microbial biodiversity

* Current sequencing technologies produce millions of short reads per metagenome
 - a HiSeq4000 yields 1300-1500 Gb of 2x150bp sequence reads

* The challenge is finding genes and other useful information in complex meta sets of data
 - ARGs can be very similar but confer different phenotypes
 - length of ARGs range from 500-2000 bp on average

---

![arg-tool-timeline]({{site.url}}/slides/slide-data/iror/arg-tool-timeline.svg)

---

***

### Antimicrobial Resistance: [terminology summary]()

***

|term|definition|
|----|----|
|AMR|Antimicrobial Resistance|
|gene|a unit of DNA|
|ARG|Antimicrobial Resistance Gene|
|mutation|a change in the sequence of a gene|
|horizontal gene transfer|non-vertical movement of a gene from one organism to another|
|read|a single sequence of nucleotides produced by a sequencer|
|metagenome|a set of sequence reads from a community of microbes|

----

Existing ARG detection tools are not only time-consuming and convoluted to run, they also yield false positives/negatives

---

***

### Tool development: [aims]()

***

* Improve accuracy of ARG detection in metagenomes
 - reduce false negatives/positives
 - report both horizontally acquired and SNP-mediated ARGs

* Comparable performance to existing tools
 - can run on a typical laptop configuration

* User-friendly
 - easy to interpret report
 - output can be parsed easily
 - databases can be swapped/updated

---

***

### Tool development: [idea]()

***

* Encode databases of very similar genes using [variation graphs]()
 - directed acyclical graphs
 - each node represents a base (A/G/C/T)
 - edges connect single bases

* Graph traversals will represent input gene sequences

* Sequence reads that align to graph traversals can be classified

* Scoring of alignments allows ARG annotation
 - can assign a measure of confidence

---

![groot-figure]({{site.url}}/slides/slide-data/iror/figure.png)

---

***

### Tool development: [indexing]()

***

* A gene database is clustered, then converted to variation graphs

* Graph traversals are windowed and decomposed to k-mer sets

* A [MinHash signature]() is kept for each window of graph traversal

![groot-figure-1a]({{site.url}}/slides/slide-data/iror/figure-1a.png)

---

***

### Tool development: [seeding]()

***

* Query reads are quality checked, trimmed and hashed

* The read signature is queried against the index using additional locality sensitive hashing

* Seeds are determined using ranked [Jaccard Similarity]() estimates

![groot-figure-1b]({{site.url}}/slides/slide-data/iror/figure-1b.png)

---

***

### Tool development: [aligning]()

***

* Assumption: majority of reads do not contain novel SNPs or errors

* Hierarchical local alignment
 - exact match > shuffled seed > gapped-end alignment

* Score traversal to classify an alignment (unique, perfect etc.)

![groot-figure-1c]({{site.url}}/slides/slide-data/iror/figure-1c.png)

---


<img src="{{site.url}}/slides/slide-data/iror/groot-logo.svg" width="40%">

## G.R.O.O.T

***

**G**raphing **R**esistance **O**ut **O**f me**T**agenomes

---

***

### Tool development: [GROOT]()

***

* Detects Antibiotic Resistance Genes (ARGs) in metagenomic samples

* Uses variation graphs to index a reference ARG set

* Performs quick and accurate annotation of reads
 - probabilistic seeding to the graphs using MinHash
 - hierarchical local alignment and scoring of graph traversals

* Written in [Go]()

---

### Tool development: [pipelines & visualisation]()

***

* Bioinformatic pipelines are common place in genomics research
 - link different program input / outputs and standardise analyses
 - frameworks exist to simplify parallel & distributed pipelines

* Working on a pipeline to add biological context to GROOT results
 - are ARGs moving between samples?
 - are ARGs part of multi-cassette elements?

* Working on visualisation software
 - visualisation required for tool adoption
 - interactive viewers as web applications
 - formats and displays pipeline output

----

Why did I write these in Go?

---

***

### Go: [an overview]()

***

* Created at Google in 2009
 - v1.9 was released this year
 - sometimes referred to as `golang`

* It is:
 - compiled
 - statically typed
 - garbage collected

* Concurrency is "baked-in"
 - concurrency is the composition of independently executing computations
 - don't communicate by sharing memory, share memory by communicating

---

***

### Go: [an example]()

***

<iframe data-src="https://play.golang.org/p/00pJKrTMOc" width="700" height="500" frameborder="0" marginwidth="0" marginheight="0" scrolling="yes" style="border:2px solid #000; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>

---

***

### Go: [an example]()

***

<iframe data-src="https://play.golang.org/p/WnRDab5Q06" width="700" height="500" frameborder="0" marginwidth="0" marginheight="0" scrolling="yes" style="border:2px solid #000; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>

* The `go statement` runs the function as usual, but doesn't make the caller wait - it launches a goroutine.

---

***

### Go: [go routines]()

***

* A [goroutine]() is an independently executing function, launched by the `go` statement

* It has its own call stack, which grows and shrinks as required

* It's very cheap -  a program can have hundreds of thousands of goroutines

* It's not a thread, goroutines are multiplexed dynamically onto threads as needed to keep all the goroutines running

* A [channel]() provides a communication connection between two goroutines

---

***

### Go: [an example]()

***

<iframe data-src="https://play.golang.org/p/gTGCjXy2jJ" width="700" height="500" frameborder="0" marginwidth="0" marginheight="0" scrolling="yes" style="border:2px solid #000; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>

---

***

### Go: [channels]()

***

* Send and receive values with the channel operator `<-`
 - ch <- v    // Send v to channel ch.
 - v := <-ch  // Receive from ch, and assign to v

* By default, sends and receives block until the other side is ready

* Channels can both communicate and synchronize

---

***

### Go: [a more interesting example]()

***

* As mentioned earlier, metagenomes consist of millions of sequence reads
 - performing a series of operations on each read is standard in most bioinformatics programs

* Use a Go generator pattern to process a stream of data
 - uses a constant amount of memory
 - important when processing very large data sets that might not fit in RAM

* Connect a series of concurrent processes, each handling one read at a time

---

*  Interfaces are named collections of method signatures
 - allow flexibility and enables polymorphism

``` go
/*
  The process interface
*/
type process interface {
	Run()
}

/*
  The basic pipeline - takes a list of Processes and runs them in Go routines, the last process is ran in the fg
*/
type Pipeline struct {
	Processes []process
}

func NewPipeline() *Pipeline {
	return &Pipeline{}
}

func (pl *Pipeline) Run() {
	for i, proc := range pl.Processes {
		if i < len(pl.Processes)-1 {
			go proc.Run()
		} else {
			proc.Run()
		}
	}
}

func (pl *Pipeline) AddProcess(proc process) {
	pl.Processes = append(pl.Processes, proc)
}

func (pl *Pipeline) AddProcesses(procs ...process) {
	for _, proc := range procs {
		pl.AddProcess(proc)
	}
}
```

---

* Define each process within a struct

``` go
/*
  A process to generate a FASTA entry from a stream of bytes
*/
type FastaHandler struct {
	process
	Input  chan []byte
	Output chan seqio.FASTAentry
}

func NewFastaHandler() *FastaHandler {
	return &FastaHandler{Output: make(chan seqio.FASTAentry, BUFFERSIZE)}
}

func (proc *FastaHandler) Run() {
	defer close(proc.Output)
	var header, seq []byte
	// grab four lines and create a new FASTQread struct from them - perform some format checks and trim low quality bases
	for line := range proc.Input {
		// ignore empty lines
		if len(line) == 0 {
			continue
		}
		// grab the fasta header if the line starts with a chevron
		if line[0] == '>' {
			// if we already have a header in memory, this new header signals the end of the previous sequence - now save the previous header and sequence together
			if len(header) != 0 {
				// create fasta entry
				newEntry, err := seqio.NewFASTAentry(header, seq)
				if err != nil {
					log.Fatal(err)
				}
				// send on the new entry and reset the line stores
				proc.Output <- newEntry
				header, seq = nil, nil
			}
			// if this is the first time we have seen a header, save it
			header = line[1:]
		} else {
			// the line is not a header, append the line to seq
			seq = append(seq, line...)
		}
	}
	// send the final entry over the channel before closing
	newEntry, err := seqio.NewFASTAentry(header, seq)
	if err != nil {
		log.Fatal(err)
	}
	// send on the new entry and reset the line stores
	proc.Output <- newEntry
}
```

---

* Initialise the processes, connect them and then run the pipeline

``` go
// create a pipeline
pipeline := stream.NewPipeline()

// Init processes
dataStream := stream.NewDataStreamer()
fastaHandler := stream.NewFastaHandler()
msaChecker := stream.NewMsaChecker()

// add in the user parameters
dataStream.InputFile = []string{msa}
msaChecker.MinSeqLength = *readLength

// Arrange pipeline processes
fastaHandler.Input = dataStream.Output
msaChecker.Input = fastaHandler.Output

// submit each process to the pipeline and then run
pipeline.AddProcesses(dataStream, fastaHandler, msaChecker)
pipeline.Run()
```

---

***

### Go: [some pros & cons]()

***

|PROS|CONS|
|--------|--------|
|static binaries|large binaries|
|the go toolchain|error handling|
|fast compilation and runtimes|simplicity|
|good standard library|limited libraries|
|built-in concurrency||
|simplicity||

---

***

### Go: [my thoughts]()

***

* it's relatively quick
 - to learn, write, compile and run
 - good balance between performance and productivity

* great concurrency features
 - results in well-structured, clean code
 - enables parallelism

* excellent bioinformatics library ([biogo]())

* great learning materials
 - online materials
 - strong community (of [gophers]())

---

<iframe data-src="https://gopherize.me/" width="700" height="500" frameborder="0" marginwidth="0" marginheight="0" scrolling="yes" style="border:2px solid #000; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>

----

#### IROR Seminar Series

***

# Thanks for listening

***

<br/>email: [will.rowe@stfc.ac.uk](will.rowe@stfc.ac.uk) | twitter: [wil_rowe](https://twitter.com/wil_rowe)


</script>
<section>
    <pre><code data-trim data-noescape>
    </code></pre>
</section>
